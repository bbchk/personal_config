//
//
//
// useEffect(() => {
//     if (activeCards.length < 2) {
//       return;
//     }
//
//     //3 cards active, prev cards aren't matched
//     if (activeCards.length > 2) {
//       setActiveCards([activeCards.at(-1)]);
//       clearTimeout(deactiveCardsTimerRef.current);
//       return;
//     }
//
//     //2 cards active, check for match
//     const [fIdx, sIdx] = activeCards;
//     if (cardsIds[fIdx] == cardsIds[sIdx]) {
//       setSolvedCards((prevSolvedCards) => [...prevSolvedCards, fIdx, sIdx]);
//
//       soundTimerRef.current = setTimeout(() => {
//         setHiddenCards((prevHiddenCards) => [...prevHiddenCards, fIdx, sIdx]);
//         cardsMatchSound.current.currentTime = 0;
//         cardsMatchSound.current.volume = 0.05;
//         cardsMatchSound.current.play();
//
//         if (hiddenCards.length > 0 && hiddenCards.length === cardsIds.length) {
//           registerVictory();
//         }
//       }, 2000);
//
//       setActiveCards([]);
//     } else {
//       deactiveCardsTimerRef.current = setTimeout(() => {
//         setActiveCards([]);
//       }, 1000);
//     }
//   }, [activeCards, cardsIds]);
//

import { useCallback, useRef } from 'react';

function useDebounce(callback, delay) {
  // Use useRef to store the timeout ID
  const timeoutRef = useRef(null);

  // Use useCallback to memoize the debounced function
  const debouncedCallback = useCallback(
    (...args) => {
      // Clear the previous timeout
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      // Set a new timeout
      timeoutRef.current = setTimeout(() => {
        callback(...args);
      }, delay);
    },
    [callback, delay]
  );

  return debouncedCallback;
}
