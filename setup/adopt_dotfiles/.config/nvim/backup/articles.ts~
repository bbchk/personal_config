import { ApiErrorHandler } from 'errors/ApiError';
import { httpClient } from '../http';
import {
  ApiCreateArticleResponse,
  ArticleDrafs,
  ArticleWithRelations,
  CreateArticleForm,
  PaginatedArticles,
  SearchParams
} from 'types';

const fetchArticles = async (searchParams: SearchParams) => {
  const tagId = searchParams['tagId'] || 0;

  const response = await httpClient<PaginatedArticles>({
    url: `/articles/tags/${tagId}`,
    params: searchParams
  });

  return response.data;
};

const fetchArticle = async (articleId: number, searchParams: SearchParams) => {
  const response = await httpClient<ArticleWithRelations>({
    url: `/articles/${articleId}`,
    params: searchParams
  });

  return response.data;
};

const fetchArticleDrafs = async () => {
  const response = await httpClient<ArticleDrafs[]>({
    url: `/article/drafts`
  });

  return response.data;
};

const storeArticleDraft = async (content: string) => {
  const response = await httpClient({
    method: 'POST',
    url: '/article/draft',
    data: { content }
  });

  return response.data;
};

const fetchArticlesByUser = async (
  userId: number,
  searchParams: SearchParams
) => {
  const response = await httpClient<PaginatedArticles>({
    url: `/user/${userId}/articles`,
    params: searchParams
  });

  return response.data;
};

const fetchFeaturedArticles = async () => {
  const response = await httpClient<PaginatedArticles>({
    url: '/articles/tags/1'
  });

  return response.data;
};

const fetchPremiumArticlesByTag = async (searchParams: SearchParams) => {
  const tagId = searchParams['tagId'] || 0;

  const response = await httpClient<PaginatedArticles>({
    url: `/premium/tags/${tagId}`,
    params: searchParams
  });

  return response.data;
};

const createArticle = async (data: CreateArticleForm) => {
  const response = await httpClient<ApiCreateArticleResponse>({
    method: 'POST',
    url: '/articles',
    headers: {
      'Content-Type': 'multipart/form-data'
    },
    data
  });

  return response.data;
};

const updateArticle = async (data: CreateArticleForm, articleId: number) => {
  const response = await httpClient<ApiCreateArticleResponse>({
    method: 'POST',
    url: `/articles/${articleId}`,
    headers: {
      'Content-Type': 'multipart/form-data'
    },
    data
  });

  return response.data;
};

const deleteArticle = async (articleId: number) => {
  try {
    const response = await httpClient({
      method: 'DELETE',
      url: `/articles/${articleId}`
    });

    return response.data;
  } catch (error) {
    ApiErrorHandler.handle(error);
  }
};

const getImageFile = async (imageUrl: string) => {
  try {
    const response = await httpClient({
      url: `/image?url=${imageUrl}`,
      responseType: 'blob'
    });

    const blob = new Blob([response.data], {
      type: response.data.type
    });

    const file = new File([blob], imageUrl.split('/')[3], {
      type: blob.type
    });

    return file;
  } catch (error) {
    return null;
  }
};

export {
  createArticle,
  fetchArticles,
  fetchArticle,
  fetchArticlesByUser,
  getImageFile,
  updateArticle,
  deleteArticle,
  fetchFeaturedArticles,
  fetchPremiumArticlesByTag,
  fetchArticleDrafs,
  storeArticleDraft
};
