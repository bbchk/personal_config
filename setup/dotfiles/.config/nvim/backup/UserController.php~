<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Services\UserService;
use Illuminate\Support\Facades\Auth;
use App\Http\Requests\IndexUserRequest;
use App\Notifications\UserFollowNotification;

class UserController extends Controller
{
    private UserService $userService;

    public function __construct(UserService $userService)
    {
        $this->userService = $userService;
    }

    public function index(IndexUserRequest $request)
    {

        $page = (int) ($request->validated('page') ?? 1);
        $pageSize = (int) ($request->validated('perPage') ?? 5);
        $sort = $request->validated('sort', []);
        $search = $request->validated('search');

        return $this->userService->listAllUsers($pageSize, $page, $sort, $search);
    }

    public function show(int $userId)
    {
        $user = $this->userService->findUserById($userId);

        $user->loadCount(['followers', 'following']);

        return $user;
    }

    public function follow(int $userId)
    {
        $user = Auth::user();

        if ($user->id == $userId) {
            return response()->json([
                'message' => 'You can\'t follow yourself.',
            ], 400);
        }
        $follower = $this->userService->findUserById($userId);

        $existingFollow = $user->following()->where('following_id', $follower->id)->exists();

        if ($existingFollow) {
            return response()->json([
                'message' => 'You are already following this user.',
            ], 400);
        }

        $user->following()->attach($follower);

        $follower->notify(new UserFollowNotification($user));
        return response()->json([
            'message' => 'You are now following this user.'
        ]);
    }

    public function unFollow(int $userId)
    {
        $user = Auth::user();
        $follower = $this->userService->findUserById($userId);

        $existingFollow = $user->following()->where('following_id', $follower->id)->exists();

        if ($existingFollow) {
            $user->following()->detach($follower);
            return response()->json([
                'message' => 'You unfollowed this user.',
            ], 400);
        }
        return response()->json([
            'message' => 'You are not following this user.',
        ], 400);
    }

    public function getFollowers(int $userId)
    {
        $user = $this->userService->findUserById($userId);

        return $user->followers()->latest()->paginate(10);
    }

    public function getFollowing(int $userId)
    {
        $user = $this->userService->findUserById($userId);

        return $user->following()->latest()->paginate(10);
    }
}