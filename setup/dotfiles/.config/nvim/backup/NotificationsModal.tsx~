import { useGlobalUI } from 'contexts/GlobalUIContext';
import Modal from './Modal';
import useGetMeNotifications from 'hooks/useGetMeNotifications';
import useMarkAllMeNotificationsRead from 'hooks/useMarkAllMeNotificationsRead';
import { useEffect } from 'react';

const NotificationsModal = () => {
  const { data: notifications, isLoading, error } = useGetMeNotifications();
  const { setActiveModal } = useGlobalUI();

  const { mutate } = useMarkAllMeNotificationsRead();
  // mark all notifications read on modal opening

  useEffect(() => {
    mutate(undefined, {
      onSettled: () => {
        //TODO: provide visual feedback
      }
    });
  }, [mutate]);

  //TODO: introduce better ui/ux for handling
  if (isLoading) {
    return <div>Loading...</div>;
  }

  //TODO: introduce better ui/ux for handling
  if (error) {
    return <div>Sorry, an error occurred...</div>;
  }

  //TODO: notifications are paginated, introduce pagination on modal
  return (
    <Modal
      title={`Your's notifications`}
      closeModal={() => setActiveModal(null)}
    >
      <ul className="flex h-[40vh] w-full min-w-max flex-col overflow-scroll overflow-x-hidden">
        {/* TODO: introduce type for notifications on fe and use it here*/}

        {notifications?.data?.map((n) => {
          const isReadBefore = !n?.read_at;
          return (
            <li
              key={`notifications${n.id}`}
              className={`border-b border-gray-700 p-4 text-white last:border-none ${
                isReadBefore ? '' : ''
              }`}
            >
              <div className="flex items-center justify-between gap-10">
                <span
                  className={`${
                    isReadBefore ? '' : ''
                  } max-w-[50vw] overflow-hidden truncate`}
                >
                  {n?.data?.message +
                    'bborder-b border-gray-700 p-4 text-white last:border-none border-b border-gray-700 p-4 text-white last:border-none border-b border-gray-700 p-4 text-white last:border-none order-b border-gray-700 p-4 text-white last:border-none border-b border-gray-700 p-4 text-white last:border-none border-b border-gray-700 p-4 text-white last:border-none '}
                </span>

                {!isReadBefore && (
                  <span className="flex size-8 items-center justify-center rounded-[100%] bg-primary font-serif text-xs font-bold text-black">
                    New
                  </span>
                )}
              </div>
            </li>
          );
        })}
      </ul>
    </Modal>
  );
};

export default NotificationsModal;
