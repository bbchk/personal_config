import AvatarImage from './AvatarImage';
import useGetMe from 'hooks/auth/useGetMe';
import { useState } from 'react';
import AvatarEditForm from './AvatarEditForm';
import { Link } from 'react-router-dom';
import useGetUser from 'hooks/useGetUser';
import { User } from 'types';
import { useFollowUser, useUnfollowUser } from 'hooks/useManageFollowingOfUser';
import { Button } from '@mantine/core';
import useGetFollowers from 'hooks/useGetFollowers';
import { useGlobalUI } from 'contexts/GlobalUIContext';
import { Modals } from 'enums';

type HeroProps = {
  children: React.ReactNode;
};

const Hero = ({ children }: HeroProps) => {
  return (
    <section className="bg-[url('/assets/hero-bg.png')] bg-cover bg-center">
      {children}
    </section>
  );
};

const HeroRoot = () => {
  return (
    <Hero>
      <div className="flex flex-col items-center gap-6 py-52 text-light-100">
        <h1 className="text-center font-serif text-2xl font-bold md:text-5xl">
          Lorem ipsum dolor <span className="text-primary">sit amet</span>
        </h1>

        <hr className="w-[180px] border-primary" />

        <p className="max-w-[620px] text-center font-sans text-sm font-normal md:text-xl">
          Donec non massa auctor, dictum ante eu, ultrices eros. Sed sit amet
          augue nec diam tempor placerat. Integer dignissim lacinia turpis.
        </p>
      </div>
    </Hero>
  );
};

const HeroArticles = ({ premium }: { premium?: boolean }) => {
  return (
    <Hero>
      <div className="flex flex-col items-center pb-28 pt-24 text-light-100">
        {premium ? (
          <div className="app-container relative">
            <h1 className="font-serif text-2xl font-bold md:text-5xl">
              Premium Articles
            </h1>

            <div className="absolute right-0 top-1/2 flex size-40 -translate-y-1/2 items-center justify-center rounded-full bg-[#495057] p-2">
              <img className="" src="/assets/premium-icon.png" alt="Diamond" />
            </div>
          </div>
        ) : (
          <h1 className="text-center font-serif text-2xl font-bold md:text-5xl">
            Articles
          </h1>
        )}
      </div>
    </Hero>
  );
};

type HeroProfileProps = {
  children: React.ReactNode;
  user: User;
};

const HeroProfile = ({ children, user }: HeroProfileProps) => {
  const { user: me } = useGetMe();

  const [deleteAccount, setDeleteAccount] = useState(false);
  const { setActiveModal } = useGlobalUI();

  const isProfileOwnedByCurrentUser = me?.id === user?.id;
  return (
    <Hero>
      {deleteAccount && <AvatarEditForm setIsModal={setDeleteAccount} />}

      <div className="app-container relative flex flex-col items-center gap-4 py-16 text-light-100 md:block">
        <div>
          {children}

          <div className="mt-4 flex justify-start gap-4 [&>button]:size-max">
            <button
              onClick={() => setActiveModal(Modals.FOLLOWING)}
              className="link-primary"
            >
              <span>{`${user?.following_count} `}</span>
              following
            </button>

            <button
              onClick={() => setActiveModal(Modals.FOLLOWERS)}
              className="link-primary"
            >
              <span>{`${user?.followers_count} `}</span>
              followers
            </button>
          </div>
        </div>

        <div className="right-32 top-16 block size-32 md:absolute">
          <span className="relative">
            <AvatarImage url={user?.image_url} alt={user?.name} />

            {isProfileOwnedByCurrentUser && (
              <button
                type="button"
                onClick={() => setDeleteAccount(true)}
                className="absolute -bottom-3 left-1/2 size-8 -translate-x-1/2 bg-[url('/assets/Pencil.svg')] bg-center bg-no-repeat"
              />
            )}
          </span>
        </div>
      </div>
    </Hero>
  );
};

const OwnHeroProfile = () => {
  const { user, isLoading: isMeLoading, error: meError } = useGetMe();

  if (isMeLoading) {
    return <div>Loading...</div>;
  }

  if (meError) {
    return <div>Sorry, error occured...</div>;
  }

  return (
    <HeroProfile user={user as User}>
      <>
        <h1 className="mb-4 font-serif text-4xl font-bold">
          Welcome, {user?.name}
        </h1>

        <Link
          className="mb-3 block font-bold text-primary"
          to={`/profile/${user?.id}/edit`}
        >
          Edit Profile {'->'}
        </Link>

        <Link
          className="block font-bold text-primary"
          to={`/subscription/${user?.id}/edit`}
        >
          Edit subscription {'->'}
        </Link>
      </>
    </HeroProfile>
  );
};

const PublicHeroProfile = () => {
  const { user: me } = useGetMe();
  const { data: followers } = useGetFollowers();
  // const { data: following } = useGetFollowing();
  const { user, isUserLoading, userError } = useGetUser();

  const [isFollowLoading, setIsFollowLoading] = useState(false);

  const [isMeFollowingUser, setIsMeFollowingUser] = useState<boolean>(
    followers.data.some((f: User) => {
      return f.id === me?.id;
    })
  );

  const { mutate: followMutate } = useFollowUser();
  const { mutate: unfollowMutate } = useUnfollowUser();

  const unfollow = () => {
    setIsFollowLoading(true);
    unfollowMutate(
      { userId: user.id },
      {
        onError: (err) => {
          //TODO: dispatch notification
        },
        onSuccess: () => {
          setIsMeFollowingUser(false);
        },
        onSettled: () => {
          setIsFollowLoading(false);
        }
      }
    );
  };

  const follow = () => {
    setIsFollowLoading(true);
    followMutate(
      { userId: user.id },
      {
        onError: (err) => {
          //TODO: dispatch notification
        },
        onSuccess: () => {
          setIsMeFollowingUser(true);
        },
        onSettled: () => {
          setIsFollowLoading(false);
        }
      }
    );
  };

  if (isUserLoading) {
    return <div>Loading...</div>;
  }

  if (userError) {
    return <div>Sorry, error occured...</div>;
  }

  return (
    <HeroProfile user={user as User}>
      <div className="flex items-center gap-6">
        <h1 className="font-serif text-4xl font-bold">{user?.name}</h1>

        <Button
          type="button"
          onClick={isMeFollowingUser ? () => unfollow() : () => follow()}
          className="button-primary h-fit px-4 text-xl"
          loading={isFollowLoading}
        >
          {isMeFollowingUser ? 'Unfollow' : 'Follow'}
        </Button>
      </div>
    </HeroProfile>
  );
};

export {
  HeroRoot,
  HeroArticles,
  HeroProfile,
  Hero,
  OwnHeroProfile,
  PublicHeroProfile
};
