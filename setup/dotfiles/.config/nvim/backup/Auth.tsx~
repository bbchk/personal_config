import { Link } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { TextInput, Button } from '@mantine/core';
import Modal from './Modal';
import type { LoginForm, RegisterForm } from 'types';
import { useRegisterForm, useLoginForm } from 'hooks/useAppForm';
import useLogin from 'hooks/auth/useLogin';
import useRegister from 'hooks/auth/useRegister';
import { useGlobalUI } from 'contexts/GlobalUIContext';
import { Modals } from 'enums';

type FormProps = {
  isSubmitting: boolean;
  setIsSubmitting: (value: boolean) => void;
};

const Auth = () => {
<<<<<<< HEAD
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const token = params.get('token');

    if (token) {
      console.log('Received token:', token);
      // Store the token in local storage or context
      localStorage.setItem('token', token);
      window.location.href = '/';
    }
  }, []);
=======
>>>>>>> c0491f67 (feat(global-ui-context): refactor usage in Auth and Header comps)
  const { activeModal, setActiveModal } = useGlobalUI();
  const [isSubmitting, setIsSubmitting] = useState(false);

  return (
    <Modal
      title={activeModal === Modals.LOGIN ? 'Log in' : 'Register'}
      closeModal={() => setActiveModal(null)}
    >
      {activeModal === Modals.LOGIN ? (
        <LoginForm
          isSubmitting={isSubmitting}
          setIsSubmitting={setIsSubmitting}
        />
      ) : (
        <RegisterForm
          isSubmitting={isSubmitting}
          setIsSubmitting={setIsSubmitting}
        />
      )}

      <button
        type="button"
        onClick={() =>
          setActiveModal(
            activeModal === Modals.LOGIN ? Modals.REGISTER : Modals.LOGIN
          )
        }
        className="mt-4 text-primary"
      >
        {activeModal === Modals.LOGIN
          ? "Don't have an account? Register"
          : 'Already have an account? Login'}
      </button>
    </Modal>
  );
};

const LoginForm = ({ isSubmitting, setIsSubmitting }: FormProps) => {
  const { setActiveModal } = useGlobalUI();
  const { mutate } = useLogin();

  const { loginForm } = useLoginForm();

  const mantineHandleSubmit = async (values: typeof loginForm.values) => {
    if (loginForm.isValid()) {
      setIsSubmitting(true);

      mutate(values, {
        onSettled: () => {
          setIsSubmitting(false);
          setActiveModal(null);
        }
      });
    }
  };
  return (
    <form
      onSubmit={loginForm.onSubmit(mantineHandleSubmit)}
      noValidate
      className="flex w-full flex-col gap-6"
    >
      <TextInput
        label="Email"
        placeholder="your-email@email.com"
        styles={{
          label: { color: 'white' }
        }}
        {...loginForm.getInputProps('email')}
      />

      <TextInput
        label="Password"
        type="password"
        placeholder="********"
        styles={{
          label: { color: 'white' }
        }}
        {...loginForm.getInputProps('password')}
      />

      <Button
        type="submit"
        loading={isSubmitting}
        className="mt-4 h-10 w-full rounded-[55px] bg-blue-500 font-bold"
      >
        Log in
      </Button>
    </form>
  );
};

const RegisterForm = ({ setIsSubmitting, isSubmitting }: FormProps) => {
  const { setActiveModal } = useGlobalUI();
  const { registerForm } = useRegisterForm();
  const { mutate } = useRegister();

  const mantineHandleSubmit = async (values: typeof registerForm.values) => {
    if (registerForm.isValid()) {
      setIsSubmitting(true);

      mutate(values, {
        onSettled: () => {
          setIsSubmitting(false);
          setActiveModal(null);
        }
      });
    }
  };
  return (
    <form
      onSubmit={registerForm.onSubmit(mantineHandleSubmit)}
      noValidate
      className="flex w-full flex-col gap-6"
    >
      <TextInput
        label="Email"
        placeholder="your-email@email.com"
        styles={{
          label: { color: 'white' }
        }}
        {...registerForm.getInputProps('email')}
      />

      <TextInput
        label="Name"
        placeholder="Your Name"
        styles={{
          label: { color: 'white' }
        }}
        {...registerForm.getInputProps('name')}
      />

      <TextInput
        label="Password"
        type="password"
        placeholder="********"
        styles={{
          label: { color: 'white' }
        }}
        {...registerForm.getInputProps('password')}
      />

      <TextInput
        label="Confirm Password"
        type="password"
        placeholder="********"
        styles={{
          label: { color: 'white' }
        }}
        {...registerForm.getInputProps('password_confirmation')}
      />

      <Button
        type="submit"
        loading={isSubmitting}
        className="mt-4 h-10 w-full rounded-[55px] bg-blue-500 font-bold"
      >
        Register
      </Button>

      <div className="google-login flex w-full items-center justify-center rounded-[55px] bg-white">
        <Link
          className="flex w-full gap-2 rounded-[55px] border border-slate-200 px-4 py-2 text-slate-700 transition duration-150 hover:border-slate-400 hover:text-slate-900 hover:shadow dark:border-slate-700 dark:text-slate-200 dark:hover:border-slate-500 dark:hover:text-slate-300"
          to="http://localhost:8000/api/auth/google/redirect"
        >
          <img className="size-6" src="/assets/google-icon.svg" alt="" />

          <span>Login with Google</span>
        </Link>
      </div>

      <div className="facebook-login flex w-full items-center justify-center rounded-[55px] bg-white">
        <Link
          className="flex w-full gap-2 rounded-[55px] border border-slate-200 px-4 py-2 text-slate-700 transition duration-150 hover:border-slate-400 hover:text-slate-900 hover:shadow dark:border-slate-700 dark:text-slate-200 dark:hover:border-slate-500 dark:hover:text-slate-300"
          to="http://localhost:8000/api/auth/facebook/redirect"
        >
          <img className="size-6" src="/assets/facebook-logo.svg" alt="" />
          <span>Login with Facebook</span>
        </Link>
      </div>
    </form>
  );
};

export default Auth;
