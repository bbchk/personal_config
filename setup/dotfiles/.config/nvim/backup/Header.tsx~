import { useState } from 'react';
import { Link } from 'react-router-dom';
import { useTransition, animated } from '@react-spring/web';
import IconHumburger from '../icons/IconHumburger.svg';
import IconClose from '../icons/close-x-svgrepo-com.svg';
import Auth from './Auth';
import Warning from './Warning';
import HeaderLink from './HeaderLink';
import HeaderButton from './HeaderButton';
import useGetMe from 'hooks/auth/useGetMe';
import useLogout from 'hooks/auth/useLogOut';
import useAuth from 'hooks/auth/useAuth';
import { Modals, SortingOrder } from 'enums';
import { useGlobalUI } from 'contexts/GlobalUIContext';

const NavigationBar = () => {
  const { user } = useGetMe();
  const isAuthorized = useAuth();

  const { mutate } = useLogout();

  const [confirmLogout, setConfirmLogout] = useState(false);

  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const { activeModal, setActiveModal } = useGlobalUI();

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const transitions = useTransition(isSidebarOpen, {
    from: { transform: 'translateX(100%)' },
    enter: { transform: 'translateX(0%)' },
    leave: { transform: 'translateX(100%)' }
  });

  return (
    <nav className="bg-dark-200">
<<<<<<< HEAD
      {(activeModal === Modals.REGISTER || activeModal === Modals.LOGIN) && (
        <Auth />
      )}
=======
      {activeModal && <Auth setIsModal={() => setActiveModal(Modals.LOGIN)} />}
>>>>>>> dd8d8564 (feat: update components with modal-opening buttons to use global UI context)

      {confirmLogout && (
        <Warning callback={() => mutate()} setIsModal={setConfirmLogout} />
      )}

      <div className="app-container flex items-center justify-between py-3">
        <Link to="/" className="text-2xl font-bold text-light-100">
          ACADEMY<span className="text-primary">BLOG</span>
        </Link>

        <ul className="hidden space-x-4 md:flex">
          <HeaderLink
            item="Articles"
            to={`/articles?${SortingOrder.CREATED_AT_ASC}`}
          />

          <HeaderLink
            item="Premium"
            to={`/premium?${SortingOrder.CREATED_AT_ASC}`}
          />

          {isAuthorized === 'true' ? (
            <>
              <HeaderLink
                item="Profile"
                to={`/profile/${user?.id}?${SortingOrder.CREATED_AT_ASC}`}
              />

              <HeaderButton
                title="Logout"
                onClick={() => setConfirmLogout(true)}
              />
            </>
          ) : (
            <HeaderButton
              title="LogIn"
              onClick={() => setActiveModal(Modals.LOGIN)}
            />
          )}
        </ul>

        <button
          type="button"
          className="block md:hidden"
          onClick={toggleSidebar}
        >
          <img src={IconHumburger} alt="Humburger" />
        </button>

        {transitions(
          (styles, item) =>
            item && (
              <animated.div
                style={styles}
                className="fixed inset-0 z-50 flex flex-col bg-dark-200 p-4 md:hidden"
              >
                <button
                  type="button"
                  className="self-end"
                  onClick={toggleSidebar}
                >
                  <img src={IconClose} alt="Close" />
                </button>

                <ul className="mt-4 space-y-4">
                  <HeaderLink
                    item="Articles"
                    to={`/articles?${SortingOrder.CREATED_AT_ASC}`}
                    onClick={toggleSidebar}
                  />

                  <HeaderLink
                    item="Premium"
                    to={`/premium?${SortingOrder.CREATED_AT_ASC}`}
                    onClick={toggleSidebar}
                  />

                  {isAuthorized === 'true' ? (
                    <>
                      <HeaderLink
                        item="Profile"
                        to={`profile/${user?.id}?${SortingOrder.CREATED_AT_ASC}`}
                        onClick={toggleSidebar}
                      />

                      <HeaderButton
                        title="Logout"
                        onClick={() => {
                          setConfirmLogout(true);
                          toggleSidebar();
                        }}
                      />
                    </>
                  ) : (
                    <HeaderButton
                      title="LogIn"
                      onClick={() => {
                        setActiveModal(Modals.LOGIN);
                        toggleSidebar();
                      }}
                    />
                  )}
                </ul>
              </animated.div>
            )
        )}
      </div>
    </nav>
  );
};

export default NavigationBar;
