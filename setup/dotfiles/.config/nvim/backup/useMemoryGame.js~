import { useState, useRef, useEffect } from 'react';
import { playSound } from 'utils/playSound';
import shuffleArray from 'utils/shuffleArray';

const IDS = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8];

export const useMemoryGame = (registerVictory, options = {}) => {
  const {
    matchDelay = 2000,
    mismatchDelay = 1000,
    restartDelay = 250
  } = options;

  const hideMatchCardsTimerRef = useRef(null);
  const deactivateCardsTimerRef = useRef(null);

  const [cardsIds, setCardsIds] = useState(shuffleArray(IDS));

  const [activeCards, setActiveCards] = useState([]);
  const [matchedCards, setMatchedCards] = useState([]);
  const [hiddenCards, setHiddenCards] = useState([]);

  const cardClickSound = useRef(new Audio('/sounds/cool-click.wav')).current;
  const cardsMatchSound = useRef(new Audio('/sounds/cards-match.wav')).current;

  function restartGame() {
    clearTimeout(hideMatchCardsTimerRef.current);

    setMatchedCards([]);
    setActiveCards([]);

    setTimeout(() => {
      setHiddenCards([]);

      setCardsIds(shuffleArray(IDS));
    }, restartDelay);
  }

  function handleCardsMismatch() {
    deactivateCardsTimerRef.current = setTimeout(() => {
      setActiveCards([]);
    }, mismatchDelay);
  }

  function handleCardsMatch(fCardIdx, sCardIdx) {
    setMatchedCards((prev) => [...prev, fCardIdx, sCardIdx]);

    setActiveCards([]);

    hideMatchCardsTimerRef.current = setTimeout(() => {
      setHiddenCards((prevHiddenCards) => [
        ...prevHiddenCards,
        fCardIdx,
        sCardIdx
      ]);
      playSound(cardsMatchSound, 0.05);

      checkForVictory();
    }, matchDelay);
  }

  function checkForVictory() {
    const newMatchedCardsLen = matchedCards.length + 2;
    if (newMatchedCardsLen > 0 && newMatchedCardsLen === cardsIds.length) {
      registerVictory();
    }
  }

  const processCard = (index) => {
    playSound(cardClickSound, 0.05);

    const newActiveCards = [...activeCards, index];
    setActiveCards(newActiveCards);

    const newActiveCardsLen = newActiveCards.length;

    // One card is active
    if (newActiveCardsLen < 2) {
      return;
    }

    // 3 cards active, prev cards aren't matched
    if (newActiveCardsLen > 2) {
      setActiveCards([newActiveCards.at(-1)]);
      clearTimeout(deactivateCardsTimerRef.current);
      return;
    }

    // 2 cards active, check for match
    const [fCardIdx, sCardIdx] = newActiveCards;
    if (cardsIds[fCardIdx] === cardsIds[sCardIdx]) {
      handleCardsMatch(fCardIdx, sCardIdx);
    } else {
      handleCardsMismatch(fCardIdx, sCardIdx);
    }
  };

  useEffect(() => {
    return () => clearTimeout(deactivateCardsTimerRef.current);
  }, []);

  return [
    cardsIds,
    activeCards,
    matchedCards,
    hiddenCards,
    processCard,
    restartGame
  ];
};
