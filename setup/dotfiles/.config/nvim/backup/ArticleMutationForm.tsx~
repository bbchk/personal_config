import {
  Button,
  Checkbox,
  FileInput,
  InputBase,
  Pill,
  Popover,
  TextInput,
  UnstyledButton
} from '@mantine/core';
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import type { Tag } from 'types';
import { DateInput } from '@mantine/dates';
import useDebounceTagsSearch from 'hooks/useDebounceTagsSearch';
import { useCreateArticleForm } from 'hooks/useAppForm';
import useFocusOnSearch from 'hooks/useFocusOnSearch';
import useTagsMutation from 'hooks/useTagsMutation';
import useUpdateArticle from 'hooks/useUpdateArticle';
import useCreateArticle from 'hooks/useCreateArticle';
import useSearchTags from 'hooks/useSearchTags';
import ContentTextArea from './ContentTextArea';
import useArticleDrafts from 'hooks/useArticleDrafts';
import { formatHistoryDate } from 'utils';

type Props = {
  setDeleteArticle: (value: boolean) => void;
  id: string | undefined;
};

const ArticleMutationForm = ({ setDeleteArticle, id }: Props) => {
  const navigate = useNavigate();
  const { handleSearch } = useDebounceTagsSearch();
  const { onRemoveTag, onAddTag } = useTagsMutation();
  const { searchInputRef, focusSearchInput } = useFocusOnSearch();
  const [search, setSearch] = useState('');
  const { createArticleForm } = useCreateArticleForm();
  const [tags, setTags] = useState<Tag[]>(createArticleForm.values.tags);

  const [openDrafts, setOpenDrafts] = useState(false);
  const { data: drafts } = useArticleDrafts(openDrafts);

  const { data: searTags = [] } = useSearchTags(search);

  const { mutate: createMutation, isPending: isCreating } = useCreateArticle();
  const { mutate: updateMutation, isPending: isEditing } = useUpdateArticle();

  const submitArticle = async (values: typeof createArticleForm.values) => {
    if (createArticleForm.isValid()) {
      createMutation(values, {
        onSuccess: ({ articleId }) => navigate(`/articles/${articleId}`)
      });
    }
  };

  const updateArticle = async (values: typeof createArticleForm.values) => {
    if (createArticleForm.isValid() && id && id !== 'create') {
      updateMutation(
        { data: values, id: +id },
        {
          onSuccess: ({ articleId }) => navigate(`/articles/${articleId}`),
          onError: (error) => console.log('error', error)
        }
      );
    }
  };

  return (
    <form
      onSubmit={createArticleForm.onSubmit(
        id === 'create' ? submitArticle : updateArticle
      )}
      className="grid grid-cols-2 gap-x-12 gap-y-4"
    >
      <TextInput
        label="Title"
        placeholder="Write a short title"
        classNames={{
          input: 'rounded-none border-none'
        }}
        {...createArticleForm.getInputProps('title')}
      />

      <DateInput
        label="Date"
        placeholder="Select date"
        valueFormat="DD-MM-YYYY"
        classNames={{
          input: 'rounded-none border-none'
        }}
        {...createArticleForm.getInputProps('date')}
      />

      <TextInput
        label="Slug"
        placeholder="Slug of the article"
        classNames={{
          input: 'rounded-none border-none'
        }}
        {...createArticleForm.getInputProps('slug')}
      />

      <InputBase
        component="div"
        label="Tags"
        multiline
        classNames={{ input: 'bg-transparent border-none px-0' }}
      >
        <Pill.Group className="">
          {tags.map((tag) => (
            <Pill
              key={tag.id}
              className="bg-primary font-bold"
              withRemoveButton
              onRemove={() =>
                onRemoveTag({ id: tag.id, createArticleForm, setTags, tags })
              }
            >
              {tag.name}
            </Pill>
          ))}

          <Pill className="bg-light-100 font-bold">
            <button onClick={focusSearchInput} type="button">
              add new +
            </button>
          </Pill>
        </Pill.Group>
      </InputBase>

      <div className="relative">
        <ContentTextArea {...createArticleForm.getInputProps('content')} />

        {id === 'create' && <Popover opened={openDrafts} onChange={setOpenDrafts}>
          <Popover.Target>
            <UnstyledButton
              className="absolute right-0 top-0 font-bold text-primary"
              onClick={() => setOpenDrafts((o) => !o)}
            >
              History
            </UnstyledButton>
          </Popover.Target>

          <Popover.Dropdown>
            <ul>
              {drafts?.length
                ? drafts.map((draft) => (
                    <li key={draft.id}>
                      <UnstyledButton
                        onClick={() =>
                          createArticleForm.setFieldValue(
                            'content',
                            draft.content
                          )
                        }
                        className="hover:text-primary font-bold py-2"
                      >
                        {formatHistoryDate(draft.created_at)}

                        <span> -> </span>

                        {draft.content.slice(0, 10)}...
                      </UnstyledButton>
                    </li>
                  ))
                : 'No history available'}
            </ul>
          </Popover.Dropdown>
        </Popover>}
      </div>

      <div>
        <TextInput
          label="Serach Tags"
          ref={searchInputRef}
          placeholder="Search tag name"
          classNames={{
            input:
              'placeholder:text-dark-200 placeholder:font-bold rounded-none py-6 border-none focus:bg-slate-200'
          }}
          onChange={(event) => handleSearch(event, setSearch)}
        />

        <InputBase
          component="div"
          multiline
          classNames={{ input: 'rounded-none border-t-dark-200' }}
        >
          <Pill.Group className="min-h-28 items-start">
            {searTags.map((tag) => (
              <Pill key={tag.id} className="bg-primary">
                <UnstyledButton
                  className="font-bold"
                  onClick={() => onAddTag({ tag, createArticleForm, setTags })}
                >
                  {tag.name} +
                </UnstyledButton>
              </Pill>
            ))}
          </Pill.Group>
        </InputBase>

        <Checkbox
          size="md"
          label="Premium article"
          mt="md"
<<<<<<< HEAD
          checked={createArticleForm.values.is_premium}
          {...createArticleForm.getInputProps('is_premium')}
=======
          {...createArticleForm.getInputProps('premium')}
>>>>>>> 88d68ea0 (fix: refactor featured and premium articles as per requiremt. Imlement simple Featured Articles page with pagination and search.)
        />
      </div>

      <FileInput
        accept="image/png,image/jpeg"
        label="Select image"
        placeholder="Select image"
        clearable
        classNames={{
          input: 'rounded-none border-none',
          section: '[&>button]:text-primary'
        }}
        {...createArticleForm.getInputProps('image')}
      />

      <div className="col-span-2 flex justify-center pt-6">
        <Button
          type="submit"
          className="button-primary w-80"
          loading={isCreating || isEditing}
        >
          {id === 'create' ? 'Create' : 'Update'} Article
        </Button>
      </div>

      {id !== 'create' && (
        <button
          type="button"
          onClick={() => setDeleteArticle(true)}
          className="col-span-2 text-[#FF2CB5]"
        >
          Delete Article
        </button>
      )}
    </form>
  );
};

export default ArticleMutationForm;
