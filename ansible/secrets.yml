- name: Define variables
  set_fact:
    source_key: './.ssh/id_rsa'
    dest_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"

- name: Ensure .ssh directory exists.
  become_user: root

- name: Ensure .ssh directory exists.
  become_user: root
  file:
    dest: '{{ dest_key | dirname }}'
    mode: 0700
    state: directory
  tags:
    - dotfiles
    - ssh

- name: Install ssh key
  become_user: root
  copy:
    src: '{{ source_key }}'
    dest: '{{ dest_key }}'
    mode: 0600
  tags:
    - dotfiles
    - ssh
- name: Set authorized key took from file
  authorized_key:
    user: "{{ lookup('env', 'USER') }}"
    state: present
    key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
  tags:
    - dotfiles
    - ssh



clone down the dotfiles and recurse the submodules (which are private)
- name: Cloning .dotfiles
  ansible.builtin.git:
    repo: 'git@github.com:ThePrimeagen/.dotfiles.git'
    dest: "{{ lookup('env', 'HOME') }}/.dotfiles"
    recursive: yes
    update: yes
    accept_hostkey: yes
    version: master
  tags:
    - dotfiles

- name: Clone the git repository
  git:
    repo: 'https://github.com/bbuukk/pers.git'
    dest: '$HOME/pers'

- name: Run script to get vault password
  script: prompt_vault_pass.sh
  register: vault_password

- name: Write password to temporary file
  copy:
    content: '{{ vault_password.stdout }}'
    dest: '/tmp/vault_password.txt'
    mode: '0600'

- name: Decrypt the file
  command: ansible-vault decrypt ~/pers/key_encrypted --output=~/pers/key_decrypted --vault-password-file=/tmp/vault_password.txt
  register: result
  ignore_errors: yes

- name: Check if decryption was successful
  fail:
    msg: 'Decryption failed with the following output: {{ result.stderr }}'
  when: result.rc != 0

- name: Remove temporary password file
  file:
    path: '/tmp/vault_password.txt'
    state: absent
